<?php
// $Id$

/**
 * @file
 */

/**
 * Implements hook_menu().
 */
function commerce_order_ui_menu() {
  $items = array();

  // Note: admin/commerce/orders is defined by a default View.

  // Create an order.
  $items['admin/commerce/orders/add'] = array(
    'title' => 'Create an order',
    'description' => 'Create a new order.',
    'page callback' => 'commerce_order_ui_order_form_wrapper',
    'page arguments' => array(commerce_order_new()),
    'access callback' => 'commerce_order_access',
    'access arguments' => array('create'),
    'weight' => 10,
    'file' => 'includes/commerce_order_ui.orders.inc',
  );
  $items['admin/commerce/orders/add/%user'] = array(
    'title' => 'Create an order',
    'description' => 'Create a new order for the specified user.',
    'page callback' => 'commerce_order_ui_order_form_wrapper',
    'page arguments' => array(commerce_order_new(), 4),
    'access callback' => 'commerce_order_access',
    'access arguments' => array('create'),
    'file' => 'includes/commerce_order_ui.orders.inc',
  );

  $items['admin/commerce/orders/%commerce_order'] = array(
    'title callback' => 'commerce_order_ui_order_title',
    'title arguments' => array(3),
    'page callback' => 'commerce_order_ui_order_view',
    'page arguments' => array(3),
    'access callback' => 'commerce_order_access',
    'access arguments' => array('view', 3),
  );
  $items['admin/commerce/orders/%commerce_order/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  $items['admin/commerce/orders/%commerce_order/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'commerce_order_ui_order_form_wrapper',
    'page arguments' => array(3),
    'access callback' => 'commerce_order_access',
    'access arguments' => array('update', 3),
    'type' => MENU_LOCAL_TASK,
    'weight' => -5,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'includes/commerce_order_ui.orders.inc',
  );
  $items['admin/commerce/orders/%commerce_order/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'commerce_order_ui_order_delete_form_wrapper',
    'page arguments' => array(3),
    'access callback' => 'commerce_order_access',
    'access arguments' => array('update', 3),
    'type' => MENU_LOCAL_TASK,
    'weight' => 20,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'includes/commerce_order_ui.orders.inc',
  );

  $items['admin/commerce/config/order'] = array(
    'title' => 'Order settings',
    'description' => 'Configure general order settings, fields, and displays.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_order_settings_form'),
    'access arguments' => array('administer orders'),
    'file' => 'includes/commerce_order_ui.orders.inc',
  );
  $items['admin/commerce/config/order/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['user/%user/orders/%commerce_order'] = array(
    'title callback' => 'commerce_order_ui_order_title',
    'title arguments' => array(3),
    'page callback' => 'commerce_order_ui_order_view',
    'page arguments' => array(3, 'customer'),
    'access callback' => 'commerce_order_access',
    'access arguments' => array('view', 3, 1),
  );

  return $items;
}

/**
 * Menu item title callback: returns the number of an order for its pages.
 *
 * @param $order
 *   The order object as loaded via the URL wildcard.
 * @return
 *   A page title of the format "Order ##".
 */
function commerce_order_ui_order_title($order) {
  return t('Order @number', array('@number' => $order->order_number));
}

/**
 * Implements hook_menu_alter().
 */
function commerce_order_ui_menu_alter(&$items) {
  // Transform the field UI tabs into contextual links.
  $items['admin/commerce/config/order/settings/fields']['context'] = MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE;
  $items['admin/commerce/config/order/settings/display']['context'] = MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function commerce_order_ui_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add action link 'admin/commerce/orders/add' on 'admin/commerce/orders'.
  if ($root_path == 'admin/commerce/orders') {
    $item = menu_get_item('admin/commerce/orders/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}

/**
 * Implements hook_help().
 */
function commerce_order_ui_help($path, $arg) {
  // Display a user configurable help text on the order add page.
  if (strpos($path, 'admin/commerce/orders/add') === 0) {
    $help = variable_get('commerce_order_help_text', '');

    if (!empty($help)) {
      return '<p>' . filter_xss_admin($help) . '</p>';
    }
  }
}

/**
 * Implements hook_entity_info_alter().
 */
function commerce_order_ui_entity_info_alter(&$entity_info) {
  // Add a URI callback to the order entity.
  $entity_info['commerce_order']['uri callback'] = 'commerce_order_ui_uri';

  // Expose the order UI for order fields.
  $entity_info['commerce_order']['bundles']['commerce_order']['admin'] = array(
    'path' => 'admin/commerce/config/order',
    'real path' => 'admin/commerce/config/order',
    'access arguments' => array('administer orders'),
  );
}

/**
 * Entity uri callback: points to the admin view page of the given order.
 */
function commerce_order_ui_uri($order) {
  // Only return a value if the user has permission to view the order.
  if (commerce_order_access('view', $order)) {
    return array(
      'path' => 'admin/commerce/orders/' . $order->order_id,
    );
  }

  return NULL;
}

/**
 * Implements hook_forms().
 */
function commerce_order_ui_forms($form_id, $args) {
  $forms = array();

  // Define a wrapper ID for the order add / edit form.
  $forms['commerce_order_ui_order_form'] = array(
    'callback' => 'commerce_order_order_form',
  );

  // Define a wrapper ID for the order delete confirmation form.
  $forms['commerce_order_ui_order_delete_form'] = array(
    'callback' => 'commerce_order_order_delete_form',
  );

  return $forms;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * The Order UI module instantiates the Order add/edit form at particular paths
 * in the Commerce IA. It uses its own form ID to do so and alters the form
 * here to add in appropriate redirection.
 *
 * @see commerce_order_ui_order_form()
 */
function commerce_order_ui_form_commerce_order_ui_order_form_alter(&$form, &$form_state) {
  // Add a submit handler to the save button to add a redirect.
  $form['actions']['submit']['#submit'][] = 'commerce_order_ui_order_form_submit';
}

/**
 * Submit callback for commerce_order_ui_order_form().
 *
 * @see commerce_order_ui_form_commerce_order_ui_order_form_alter()
 */
function commerce_order_ui_order_form_submit($form, &$form_state) {
  // Apply the redirect based on the clicked button.
  if ($form_state['clicked_button']['#value'] == t('Save order', array(), array('context' => 'a drupal commerce order'))) {
    drupal_set_message(t('Order saved.'));

    $form_state['redirect'] = 'admin/commerce/orders/' . $form_state['commerce_order']->order_id . '/edit';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * The Order UI module instantiates the Order delete form at a particular path
 * in the Commerce IA. It uses its own form ID to do so and alters the form
 * here to add in appropriate redirection.
 *
 * @see commerce_order_ui_order_delete_form()
 */
function commerce_order_ui_form_commerce_order_ui_order_delete_form_alter(&$form, &$form_state) {
  $form['actions']['cancel']['#markup'] = l(t('Cancel'), 'admin/commerce/orders');

  $form['#submit'][] = 'commerce_order_ui_order_delete_form_submit';
}

/**
 * Submit callback for commerce_order_ui_order_delete_form().
 *
 * @see commerce_order_ui_form_commerce_order_ui_order_delete_form_alter()
 */
function commerce_order_ui_order_delete_form_submit($form, &$form_state) {
  $form_state['redirect'] = 'admin/commerce/orders';
}

/**
 * Implements hook_views_api().
 */
function commerce_order_ui_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'commerce_order_ui') . '/includes/views',
  );
}

/**
 * Sets the breadcrumb for order pages.
 *
 * @param $view_mode
 *   The view mode for the current order page, 'administrator' or 'customer'.
 */
function commerce_order_ui_set_breadcrumb($view_mode = 'administrator') {
  $breadcrumb = array();

  // Create the breadcrumb array based on the view mode.
  if ($view_mode == 'administrator') {
    $breadcrumb = array(
      l(t('Home'), '<front>'),
      l(t('Administration'), 'admin'),
      l(t('Store'), 'admin/commerce'),
      l(t('Orders', array(), array('context' => 'a drupal commerce order')), 'admin/commerce/orders'),
    );
  }

  drupal_set_breadcrumb($breadcrumb);
}

/**
 * Generate an array for rendering the given order.
 *
 * @param $order
 *   A fully loaded order object.
 * @param $view_mode
 *   The view mode for displaying the order, 'administrator' or 'customer'.
 *
 * @return
 *   An array as expected by drupal_render().
 */
function commerce_order_ui_order_view($order, $view_mode = 'administrator', $breadcrumb = TRUE) {
  // Set the breadcrumb for the appropriate view mode if specified.
  if ($breadcrumb) {
    commerce_order_ui_set_breadcrumb();
  }

  return commerce_order_build_content($order, $view_mode);
}
