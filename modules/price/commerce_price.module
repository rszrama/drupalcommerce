<?php
// $Id$

/**
 * @file
 * Defines the Price field with widgets and formatters used to add prices with
 *   currency codes to various Commerce entities.
 */


/**
 * Implements hook_field_info().
 */
function commerce_price_field_info() {
  return array(
    'commerce_price' => array(
      'label' => t('Price'),
      'description' => t('This field stores prices for products consisting of an amount and a currency.'),
      'settings' => array(),
      'instance_settings' => array(),
      'default_widget' => 'commerce_price_simple',
      'default_formatter' => 'commerce_price_default',
      'property_type' => 'commerce_price',
      'property_callbacks' => array('commerce_price_property_info_callback'),
    ),
  );
}

/**
 * Implements hook_field_validate().
 */
function commerce_price_field_validate($entity_type, $entity, $field, $instance, $langcode, &$items, &$errors) {
  // Ensure only numeric values are entered in price fields.
  foreach ($items as $delta => $item) {
    if (!empty($item['amount']) && !is_numeric($item['amount'])) {
      $errors[$field['field_name']][$langcode][$delta][] = array(
        'error' => 'price_numeric',
        'message' => t('%name: you must enter a numeric value for the price.', array('%name' => check_plain($instance['label']))),
      );
    }
  }
}

/**
 * Implements hook_field_load().
 */
function commerce_price_field_load($entity_type, $entities, $field, $instances, $langcode, &$items, $age) {
  // Deserialize additional data.
  foreach ($entities as $id => $entity) {
    foreach ($items[$id] as $delta => $item) {
      $items[$id][$delta]['data'] = !empty($items[$id][$delta]['data']) ? unserialize($items[$id][$delta]['data']) : array();
    }
  }
}

/**
 * Implements hook_field_presave().
 */
function commerce_price_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  if ($field['type'] == 'commerce_price') {
    // Serialize the data field before saving it to the database.
    foreach ($items as $delta => $item) {
      if (isset($item['data'])) {
        $items[$delta]['data'] = serialize($item['data']);
      }
    }

    // TODO: Convert prices to the appropriate integer value.
  }
}

/**
 * Implementation of hook_field_is_empty().
 */
function commerce_price_field_is_empty($item, $field) {
  return !isset($item['amount']) || (string) $item['amount'] == '';
}

/**
 * Creates a required, locked instance of a price field on the specified bundle.
 *
 * @param $name
 *   The name of the field; if it already exists, a new instance of the existing
 *     field will be created.
 * @param $entity_type
 *   The type of entity the field instance will be attached to.
 * @param $bundle
 *   The bundle name of the entity the field instance will be attached to.
 * @param $label
 *   The label of the field instance.
 * @param $weight
 *   The default weight of the field instance widget.
 * @param $calculation
 *   A string indicating the default value of the display formatter's calculation
 *     setting.
 */
function commerce_price_create_instance($name, $entity_type, $bundle, $label, $weight = 0, $calculation = FALSE) {
  // If a field type we know should exist isn't found, clear the Field cache.
  if (!field_info_field_types('commerce_price')) {
    field_clear_cache();
  }

  $field = field_info_field($name);
  $instance = field_info_instance($entity_type, $name, $bundle);

  if (empty($field)) {
    $field = array(
      'field_name' => $name,
      'type' => 'commerce_price',
      'cardinality' => 1,
      'entity_types' => array($entity_type),
      'translatable' => FALSE,
      'locked' => TRUE,
    );
    $field = field_create_field($field);
  }

  if (empty($instance)) {
    $instance = array(
      'field_name' => $name,
      'entity_type' => $entity_type,
      'bundle' => $bundle,

      'label' => $label,
      'required' => TRUE,
      'settings' => array(),

      // Because this widget is locked, we need it to use the full price widget
      // since the currency option can't be adjusted at the moment.
      'widget' => array(
        'type' => 'commerce_price_full',
        'weight' => $weight,
        'settings' => array(
          'currency_code' => 'default',
        ),
      ),

      'display' => array(),
    );

    $entity_info = entity_get_info($entity_type);

    // Spoof the default view mode so its display type is set.
    $entity_info['view modes']['default'] = array();

    foreach ($entity_info['view modes'] as $view_mode => $data) {
      $instance['display'][$view_mode] = array(
        'label' => 'hidden',
        'type' => 'commerce_price_formatted_amount',
        'settings' => array(
          'calculation' => $calculation,
        ),
      );
    }

    field_create_instance($instance);
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function commerce_price_field_formatter_info() {
  return array(
    'commerce_price_raw_amount' => array(
      'label' => t('Raw amount'),
      'field types' => array('commerce_price'),
      'settings' => array(
        'calculation' => FALSE,
      ),
    ),
    'commerce_price_formatted_amount' => array(
      'label' => t('Formatted amount'),
      'field types' => array('commerce_price'),
      'settings' => array(
        'calculation' => FALSE,
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function commerce_price_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $element = array();

  if ($display['type'] == 'commerce_price_raw_amount' || $display['type'] == 'commerce_price_formatted_amount') {
    $options = module_invoke_all('commerce_price_field_calculation_options', $field, $instance, $view_mode);

    if (empty($options)) {
      $element['calculation'] = array(
        '#type' => 'value',
        '#value' => FALSE,
      );

      $element['help'] = array(
        '#markup' => '<p>' . t('No configuration is necessary. The original price will be displayed as loaded.') . '</p>',
      );
    }
    else {
      // Add the option to display the original price; unshifting will give it a
      // key of 0 which will equate to FALSE with an Equal operator.
      array_unshift($options, t('Display the original price as loaded.'));

      $element['calculation'] = array(
        '#type' => 'radios',
        '#options' => $options,
        '#default_value' => empty($settings['calculation']) ? 0 : $settings['calculation'],
      );
    }
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function commerce_price_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();

  if ($display['type'] == 'commerce_price_raw_amount' || $display['type'] == 'commerce_price_formatted_amount') {
    if ($settings['calculation'] == FALSE) {
      $summary[] = t('Displaying the original price');
    }
    else {
      $summary[] = t('Displaying a calculated price');
    }
  }

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_prepare_view().
 */
function commerce_price_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items, $displays) {
  // Allow other modules to prepare the item values prior to formatting.
  foreach(module_implements('commerce_price_field_formatter_prepare_view') as $module) {
    $function = $module . '_commerce_price_field_formatter_prepare_view';
    $function($entity_type, $entities, $field, $instances, $langcode, $items, $displays);
  }
}

/**
 * Implements hook_field_formatter_view().
 */
function commerce_price_field_formatter_view($object_type, $object, $field, $instance, $langcode, $items, $display) {
  $element = array();

  // Loop through each price value in this field.
  foreach ($items as $delta => $item) {
    // Theme the display of the price based on the display type.
    if ($display['type'] == 'commerce_price_raw_amount') {
      $element[$delta] = array(
        '#markup' => check_plain($item['amount']),
      );
    }
    elseif ($display['type'] == 'commerce_price_formatted_amount') {
      $element[$delta] = array(
        '#markup' => commerce_currency_format($item['amount'], $item['currency_code'], $object),
      );
    }
  }

  return $element;
}

/**
 * Implements hook_field_widget_info().
 */
function commerce_price_field_widget_info() {
  return array(
    'commerce_price_simple' => array(
      'label' => t('Price textfield'),
      'field types' => array('commerce_price'),
      'settings' => array(
        'currency_code' => 'default',
      ),
    ),
    'commerce_price_full' => array(
      'label' => t('Price with currency'),
      'field types' => array('commerce_price'),
      'settings' => array(
        'currency_code' => 'default',
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_settings_form().
 */
function commerce_price_field_widget_settings_form($field, $instance) {
  $form = array();

  // Build an options array of allowed currency values including the option for
  // the widget to always use the store's default currency.
  $options = array(
    'default' => t('- Default store currency -'),
  );

  foreach (commerce_currencies(TRUE) as $currency_code => $currency) {
    $options[$currency_code] = t('@code - @name', array('@code' => $currency->code, '@name' => $currency->name));
  }

  $form['currency_code'] = array(
    '#type' => 'select',
    '#title' => ($instance['widget']['type'] == 'commerce_price_simple') ? t('Currency') : t('Default currency'),
    '#options' => $options,
    '#default_value' => $instance['widget']['settings']['currency_code'],
  );

  return $form;
}

/**
 * Implements hook_field_widget_form().
 */
function commerce_price_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  // Use the default currency if the setting is not present.
  if (empty($instance['widget']['settings']['currency_code']) || $instance['widget']['settings']['currency_code'] == 'default') {
    $default_currency_code = NULL;
  }
  else {
    $default_currency_code = $instance['widget']['settings']['currency_code'];
  }

  // If a price has already been set for this instance prepare default values.
  if (isset($items[$delta]['amount'])) {
    $currency = commerce_currency_load($items[$delta]['currency_code']);

    // Round the default value.
    $default_amount = round($items[$delta]['amount'], 2);

    // Run it through number_format() to add the decimal places in if necessary.
    if (strpos($default_amount, '.') === FALSE || strpos($default_amount, '.') > strlen($default_amount) - $currency->decimals) {
      $default_amount = number_format($default_amount, $currency->decimals, '.', '');
    }

    $default_currency_code = $items[$delta]['currency_code'];
  }
  else {
    $default_amount = NULL;
  }

  // Load the default currency for this instance.
  $default_currency = commerce_currency_load($default_currency_code);

  $element['#attached']['css'][] = drupal_get_path('module', 'commerce_price') . '/theme/commerce_price.css';

  // Build the form based on the type of price widget.
  switch ($instance['widget']['type']) {
    // The simple widget is just a textfield with a non-changeable currency.
    case 'commerce_price_simple':
      $element['amount'] = array(
        '#type' => 'textfield',
        '#title' => $element['#title'],
        '#default_value' => $default_amount,
        '#size' => 10,
        '#field_suffix' => $default_currency->code,
      );
      $element['currency_code'] = array(
        '#type' => 'value',
        '#default_value' => $default_currency->code,
      );
      break;

    // The full widget is a textfield with a currency select list.
    case 'commerce_price_full':
      $element['amount'] = array(
        '#type' => 'textfield',
        '#title' => $element['#title'],
        '#default_value' => $default_amount,
        '#size' => 10,
      );

      // Build a currency options list from all enabled currencies.
      $options = array();

      foreach (commerce_currencies(TRUE) as $currency_code => $currency) {
        $options[$currency_code] = check_plain($currency->code);
      }

      // If the current currency value is not available, add it now with a
      // message in the help text explaining it.
      if (empty($options[$default_currency->code])) {
        $options[$default_currency->code] = check_plain($default_currency->code);

        $description = t('The currency set for this price is not currently enabled. If you change it now, you will not be able to set it back.');
      }
      else {
        $description = '';
      }

      // If only one currency option is available, don't use a select list.
      if (count($options) == 1) {
        $currency_code = key($options);

        $element['amount']['#field_suffix'] = $currency_code;

        $element['currency_code'] = array(
          '#type' => 'value',
          '#default_value' => $currency_code,
        );
      }
      else {
        $element['amount']['#prefix'] = '<div class="commerce-price-full">';

        $element['currency_code'] = array(
          '#type' => 'select',
          '#description' => $description,
          '#options' => $options,
          '#default_value' => isset($items[$delta]['currency_code']) ? $items[$delta]['currency_code'] : $default_currency->code,
          '#suffix' => '</div>',
        );
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_field_widget_error().
 */
function commerce_price_field_widget_error($element, $error, $form, &$form_state) {
  form_error($element['amount'], $error['message']);
}

/**
 * Callback to alter the property info of price fields.
 *
 * @see commerce_price_field_info().
 */
function commerce_price_property_info_callback(&$info, $entity_type, $field, $instance, $field_type) {
  $name = $field['field_name'];
  $property = &$info[$entity_type]['bundles'][$instance['bundle']]['properties'][$name];

  $property['type'] = ($field['cardinality'] != 1) ? 'list<commerce_price>' : 'commerce_price';
  $property['getter callback'] = 'entity_metadata_field_verbatim_get';
  $property['setter callback'] = 'entity_metadata_field_verbatim_set';
  $property['auto creation'] = 'commerce_price_field_data_auto_creation';
  $property['property info'] = commerce_price_field_data_property_info();

  unset($property['query callback']);
}

/**
 * Returns the default array structure for a Price field for use when creating
 *   new data arrays through an entity metadata wrapper.
 */
function commerce_price_field_data_auto_creation() {
  return array('amount' => 0, 'currency_code' => commerce_default_currency(), 'data' => array());
}

/**
 * Defines info for the properties of the Price field data structure.
 */
function commerce_price_field_data_property_info($name = NULL) {
  return array(
    'amount' => array(
      'label' => t('Amount'),
      'description' => !empty($name) ? t('Amount value of field %name', array('%name' => $name)) : '',
      'type' => 'decimal',
      'getter callback' => 'entity_property_verbatim_get',
      'setter callback' => 'entity_property_verbatim_set',
    ),
    'currency_code' => array(
      'label' => t('Currency'),
      'description' => !empty($name) ? t('Currency code of field %name', array('%name' => $name)) : '',
      'type' => 'text',
      'getter callback' => 'entity_property_verbatim_get',
      'setter callback' => 'entity_property_verbatim_set',
      'options list' => 'commerce_currency_code_options_list',
    ),
  );
}

function commerce_price_object_get_amount($price) {
  return $price->getAmount();
}

function commerce_price_object_get_currency_code($price) {
  return $price->getCurrencyCode();
}
