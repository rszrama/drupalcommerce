<?php
// $Id$

/**
 * @file
 * Defines abstract base test class for the Commerce module tests.
 */

/**
 * Abstract class for Commerce testing. All Commerce tests should extend this
 * class.
 */
abstract class CommerceBaseTestCase extends DrupalWebTestCase {

  /**
   * Helper function to determine which modules should be enabled. Should be
   * used in place of standard parent::setUp('moduleA', 'moduleB') call.
   *
   * @param $set
   *  Which set of modules to load. Can be one of:
   *    'all': (default) All Commerce modules, including UI and payment modules.
   *    'ui': All API and UI modules.
   *    'api': Just API modules (includes commerce_ui since checkout depends on it).
   *    'dependencies': Common dependencies required by many Commerce API and UI
   *      modules.
   * @param $other_modules
   *  Array of modules to include in addition to the sets loaded by $set
   */
  protected function setUpHelper($set = 'all', array $other_modules = array()) {

    $dependencies = array(
      // API
      'entity',
      'rules',
      'addressfield',
      //'rules_admin',
      // UI
      'ctools',
      'views',
      //'views_ui',
      'field',
      'field_ui',
      'field_sql_storage',
    );
    $api = array(
      'commerce',
      'commerce_product',
      'commerce_price',
      'commerce_customer',
      'commerce_line_item',
      'commerce_order',
      'commerce_ui', 'commerce_checkout',
      'commerce_product_reference',
      'commerce_payment',
      'commerce_cart',
    );
    $ui = array(
      //'commerce_ui' // Already added in $api due to checkout module
      'commerce_line_item_ui',
      'commerce_order_ui',
      'commerce_product_ui',
      'commerce_customer_ui',
      'commerce_payment_ui',
    );
    $payment = array(
      'commerce_payment_example',
    );

    // Final module list
    $modules = array();

    // Cascade down the list and add sets
    switch ($set) {
      case 'all':
        $modules = array_merge($payment, $modules);
      case 'ui':
        $modules = array_merge($ui, $modules);
      case 'api':
        $modules = array_merge($api, $modules);
      case 'dependencies':
        $modules = array_merge($dependencies, $modules);
        break;
    }

    // Bring in modules specified by caller
    $modules = array_merge($modules, $other_modules);

    return $modules;
  }

  /**
   * Helper function to get different combinations of permission sets.
   *
   * @param $set
   *  Can be a single string (from the following) or can be an array containing
   *  multiple values that should be merged:
   *    'site admin': Admin permissions for Drupal core modules
   *    'store admin': All commerce "administer X" permissions
   */
  protected function permissionBuilder($sets) {
    if (is_string($sets)) {
      $sets = array($sets);
    }
    $site_admin = array(
      'administer blocks',
      'administer comments',
      'access dashboard',
      'administer filters',
      'administer image styles',
      'administer menu',
      'administer content types',
      'administer nodes',
      'bypass node access',
      'administer url aliases',
      'administer search',
      'administer modules',
      'administer site configuration',
      'administer themes',
      'administer software updates',
      'administer actions',
      'access administration pages',
      'access site in maintenance mode',
      'access site reports',
      'block IP addresses',
      'administer taxonomy',
      'administer permissions',
      'administer users',
    );
    $store_admin = array(
      'administer checkout',
      'configure store',
      'administer customer profiles',
      'administer customer profile types',
      'administer line item types',
      'administer orders',
      'administer products',
      'administer product types',
    );

    $final_permissions = array();

    foreach ($sets as $set) {
      switch ($set) {
        case 'site admin':
          $final_permissions = array_merge($final_permissions, $site_admin);
          break;
        case 'store admin':
          $final_permissions = array_merge($final_permissions, $store_admin);
          break;
      }
    }

    return $final_permissions;
  }

  /**
   * Wrapper to easily create users from arrays returned by permissionBuilder().
   *
   * @param $set
   *  See permissionBuilder() function
   * @return
   *  A user with the permissions returned from permissionBuilder().
   */
  protected function createUserWithPermissionHelper($set) {
    $permissions = $this->permissionBuilder($set);
    $user = $this->drupalCreateUser($permissions);
    return $user;
  }

  /**
   * Returns a site administrator user. Only has permissions for administering
   * modules in Drupal core.
   */
  protected function createSiteAdmin() {
    return $this->createUserWithPermissionHelper('site admin');
  }

  /**
   * Returns a store administrator user. Only has permissions for administering
   * Commerce modules.
   */
  protected function createStoreAdmin() {
    return $this->createUserWithPermissionHelper('store admin');
  }


  /**
   * Creates a dummy product type for use with other tests.
   *
   * @return
   *  A product type.
   *  FALSE if the appropraite modules were not available.
   */
  public function createDummyProductType($type = 'product_type', $name = 'Product Type', $description = '', $help = '', $append_random = TRUE) {
    if (module_exists('commerce_product')) {
      if ($append_random) {
        $type = $type .'_'. $this->randomName(20 - strlen($type) - 1);
        $name = $name .' '. $this->randomName(40 - strlen($name) - 1);
        $description = $description .' '. $this->randomString(128);
        $help = $help .' '. $this->randomString(128);
      }
      $new_product_type = commerce_product_ui_product_type_new();
      $new_product_type->type = $type;
      $new_product_type->name = $name;
      $new_product_type->description = $description;
      $new_product_type->help = $help;
      $new_product_type->is_new = TRUE;
      $save_result = commerce_product_ui_product_type_save($new_product_type);
      if ($save_result === FALSE) {
        return FALSE;
      }
      return $new_product_type;
    } else {
      return FALSE;
    }
  }

  /**
   * Creates a dummy product for use with other tests.
   *
   * @param $type_given
   *  Optional. The product type to base this product on. Defaults to 'product'.
   * @return
   *  A product type with most of it's basic fields set random values.
   *  FALSE if the appropraite modules were not available.
   */
  public function createDummyProduct($sku = '', $title = '', $amount = -1, $currency_code = 'USD', $uid = 1, $type_given = 'product') {
    if (module_exists('commerce_product')) {
      $new_product = commerce_product_new($type_given);
      $new_product->sku = empty($sku) ? $this->randomName(10) : $sku;
      $new_product->title = empty($title) ? $this->randomName(10) : $title;
      $new_product->uid = $uid;

      $new_product->purchase_price[LANGUAGE_NONE][0]['amount'] = ($amount < 0) ? rand(2, 500) : $amount;
      $new_product->purchase_price[LANGUAGE_NONE][0]['currency_code'] = 'USD';

      commerce_product_save($new_product);

      return $new_product;
    }
    else {
      return FALSE;
    }
  }

  /**
   * Create a dummy product display content type.
   *
   * @param $type
   *  Machine name of the content type to create. Also used for human readable
   *  name to keep things simple.
   * @param $attach_product_reference_field
   *  If TRUE, automatically add a product reference field to the new content
   *  type.
   * @param $field_name
   *  Only used if $attach_product_reference_field is TRUE. Sets the name for
   *  the field instance to attach. Creates the field if it doesn't exist.
   * @return
   *  An object for the content type.
   * @see attachProductReferenceField()
   */
  public function createDummyProductDisplayContentType($type = 'product_display', $attach_product_reference_field = TRUE, $field_name = 'field_product') {
    // If the specified node type already exists, return it now.
    if ($content_type = node_type_load($type)) {
      return $content_type;
    }

    $content_type = array(
      'type' => $type,
      'name' => $type, // Don't use a human readable name here to keep it simple.
      'base' => 'node_content',
      'description' => 'Use <em>product displays</em> to display products for sale to your customers.',
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    );
    $content_type = node_type_set_defaults($content_type);
    node_type_save($content_type);
    node_add_body_field($content_type);
    $this->pass("Created content type: $type");


    if ($attach_product_reference_field) {
      // Maybe $instance should be returned as well
      $instance = $this->attachProductReferenceField($type, $field_name);
    }

    return $content_type;
  }

  /**
   * Attach a product reference field to a given content type. Creates the field
   * if the given name doesn't already exist. Automatically sets the display
   * formatters to be the "add to cart form" for the teaser and full modes.
   *
   * @param $content_type
   *  Name of the content type that should have a field instance attached.
   * @param $field_name
   *  Only used if $attach_product_reference_field is TRUE. Sets the name for
   *  the field instance to attach. Creates the field if it doesn't exist.
   * @return
   *  An object containing the field instance that was created.
   * @see createDummyProductDisplayContentType()
   */
  public function attachProductReferenceField($content_type = 'product_display', $field_name = 'field_product') {
    if (module_exists('commerce_product')) {
      // Check if the field has already been created.
      $field_info = field_info_field($field_name);
      if (empty($field_info)) {
        // Add a product reference field to the product display node type
        $field = array(
          'field_name' => $field_name,
          'type' => 'commerce_product_reference',
          'cardinality' => 1,
          'translatable' => FALSE,
        );
        field_create_field($field);
        $this->pass("New field created: $field_name");
      } else {
        debug("NOTE: attachProductReferenceField attempting to create field <code>$field_name</code> that already exists. This is fine and this message is just for your information.");
      }

      // Check that this instance doesn't already exist
      $instance = field_info_instance('node', $field_name, $content_type);
      if (empty($insance)) {
        // Add an instance of the field to the given content type
        $instance = array(
          'field_name' => $field_name,
          'entity_type' => 'node',
          'label' => 'Product',
          'bundle' => $content_type,
          'description' => 'Choose a product to display for sale.',
          'required' => TRUE,

          'widget' => array(
            'type' => 'options_select',
          ),

          'display' => array(
            'default' => array(
              'label' => 'hidden',
              'type' => 'commerce_cart_add_to_cart_form',
            ),
            'teaser' => array(
              'label' => 'hidden',
              'type' => 'commerce_cart_add_to_cart_form',
            ),
          ),
        );
        field_create_instance($instance);
        $this->pass("Create field instance of field <code>$field_name</code> on content type <code>$content_type</code>");
      } else {
        $this->fail("Test Develoepr: You attempted to create a field that already exists. Field: $field_name -- Content Type: $content_type");
      }
      return $instance;
    } else {
      $this->fail('Cannot create product reference field because Product module is not enabled.');
    }
  }

  /**
   * Creates a product display node with an associated product.
   *
   * @param $product_id
   *  Product ID to use for the product reference field.
   * @param $title
   *  Optional title for the product node. Will default to a random name.
   * @param $product_display_content_type
   *  Machine name for the product display content type to use for creating the
   *  node. Defaults to 'product_display'.
   * @param $product_ref_field_name
   *  Machine name for the product reference field on this product display
   *  content type. Defaults to 'field_product'.
   * @return
   *  The newly saved $node object.
   */
  public function createDummyProductNode($product_id, $title = '', $product_display_content_type = 'product_display', $product_ref_field_name = 'field_product') {
    if (module_exists('commerce_product')) {
      if (empty($title)) {
        $title = $this->randomString(10);
      }
      $node = (object) array('type' => $product_display_content_type);
      node_object_prepare($node);
      $node->uid = 1;
      $node->title = $title;
      $node->{$product_ref_field_name}[LANGUAGE_NONE][]['product_id'] = $product_id;
      node_save($node);
      return $node;
    } else {
      $this->fail('Cannot use use createProductNode because the product module is not enabled.');
    }
  }

  /**
     * Create a full product node without worrying about the earlier steps in
     * the process.
     *
     * @param $count
     *  Number of product nodes to create. Each one will have a new product
     *  entity associated with it. SKUs will be like PROD-n. Titles will be
     *  like 'Product #n'. Price will be 10*n. Counting begins at 1.
     * @return
     *  An array of product node objects.
     */
  public function createDummyProductNodeBatch($count) {
    $this->createDummyProductDisplayContentType();
    $product_nodes = array();
    for ($i=1; $i<$count; $i++) {
      $sku = "PROD-$i";
      $title = "Product #$i";
      $price = $i*10;
      $product = $this->createDummyProduct($sku, $title, $price);
      $product_node = $this->createDummyProductNode($product->product_id, $title);
      $product_nodes[$i] = $product_node;
    }
    return $product_nodes;
  }

  // =============== Helper functions ===============

  /**
   * Checks if a group of modules is enabled.
   *
   * @param $module_name
   *  Array of module names to check (without the .module extension)
   * @return
   *  TRUE if all of the modules are enabled.
   */
  protected function modulesUp($module_names) {
    if (is_string($module_names)) {
      $module_names = array($module_names);
    }
    foreach ($module_names as $module_name) {
      if (!module_exists($module_name)) {
        return FALSE;
      }
    }
    return TRUE;
  }

  /**
   * Adds <pre> around a print_r of a var and returns it for use in a debug()
   * call. NOTE: It returns it instead of calling debug() itself so the debug
   * call will show the proper line that called it.
   * Usage: debug($this->pre_r($var));
   */
  public function pre_r($var) {
    return '<pre>'. print_r($var, TRUE) .'</pre>';
  }
}


/**
 * Sandbox for trying new things with tests. Eases development so only one test
 * has to run at a time. Move everything to CommerceBaseTesterTestCase after it
 * is functioning here.
 */
class CommerceSandboxTestCase extends CommerceBaseTestCase {
  protected $site_admin;

  /**
   * getInfo() returns properties that are displayed in the test selection form.
   */
  public static function getInfo() {
    return array(
      'name' => t('Commerce sandbox tests'),
      'description' => t('Sandbox for trying new things with tests. Eases development so only one test has to run at a time.'),
      'group' => t('Drupal Commerce'),
    );
  }

  /**
   * setUp() performs any pre-requisite tasks that need to happen.
   */
  public function setUp() {
    $modules = parent::setUpHelper('all');
    parent::setUp($modules);

    $this->site_admin = $this->createSiteAdmin();
    cache_clear_all(); // Just in case
  }

  /**
   * Sandbox for test development
   */
  public function testTestTest() {


  }
}


/**
 * Test class to test the CommerceBaseTestCase functions. All testTestFoo
 * functions have "testTest" in the name to indicate that they are verifying
 * that a test is working. Somewhat "meta" to do this, but it eases test
 * development.
 */
class CommerceBaseTesterTestCase extends CommerceBaseTestCase {
  protected $site_admin;

  /**
   * getInfo() returns properties that are displayed in the test selection form.
   */
  public static function getInfo() {
    return array(
      'name' => t('Commerce base class module'),
      'description' => t('Tests the functionality of the base test class. Essentially, these are meta-tests.'),
      'group' => t('Drupal Commerce'),
    );
  }

  /**
   * setUp() performs any pre-requisite tasks that need to happen.
   */
  public function setUp() {
    $modules = parent::setUpHelper('all');
    parent::setUp($modules);

    $this->site_admin = $this->createSiteAdmin();
    cache_clear_all(); // Just in case
  }

  /**
   * Sandbox for test development
   */
  public function testTestTest() {
  }

  /**
   * Ensure that all of the Commerce modules (and their dependencies) are
   * enabled in the test environment.
   */
  public function testModulesEnabled() {
    $this->drupalLogin($this->site_admin);
    $this->drupalGet('admin/modules');

    $module_ids = array(
      'edit-modules-commerce-commerce-cart-enable',
      'edit-modules-commerce-commerce-checkout-enable',
      'edit-modules-commerce-commerce-enable',
      'edit-modules-commerce-commerce-customer-enable',
      'edit-modules-commerce-commerce-line-item-enable',
      'edit-modules-commerce-commerce-order-enable',
      'edit-modules-commerce-commerce-payment-enable',
      'edit-modules-commerce-commerce-price-enable',
      'edit-modules-commerce-commerce-product-enable',
      'edit-modules-commerce-commerce-product-reference-enable',

      'edit-modules-commerce-commerce-payment-example-enable',

      'edit-modules-commerce-commerce-ui-enable',
      'edit-modules-commerce-commerce-customer-ui-enable',
      'edit-modules-commerce-commerce-line-item-ui-enable',
      'edit-modules-commerce-commerce-order-ui-enable',
      'edit-modules-commerce-commerce-payment-ui-enable',
      'edit-modules-commerce-commerce-product-ui-enable',

      'edit-modules-other-addressfield-enable',
      'edit-modules-other-entity-enable',

      'edit-modules-rules-rules-enable',

      'edit-modules-chaos-tool-suite-ctools-enable',

      'edit-modules-views-views-enable',
    );
    foreach ($module_ids as $module_id) {
      $this->assertFieldChecked($module_id);
    }
  }

  /**
   * Test that Store Admin role actually gets set up.
   */
  public function testTestStoreAdmin() {
    $store_admin = $this->createStoreAdmin();
    $this->drupalLogin($this->site_admin);
    $this->drupalGet('admin/people/permissions');
    // This will break if it isn't the second role created
    $this->assertFieldChecked('edit-5-configure-store');
  }

  /**
   * Make a test product type
   */
  public function testTestCreateDummyProductType() {
    $product_type = $this->createDummyProductType();
    debug($product_type);
    $store_admin = $this->createStoreAdmin();
    $this->drupalLogin($store_admin);
    $this->drupalGet('admin/commerce/products/types');
    $this->assertText($product_type->name, 'Dummy product type name found on admin/commerce/products/types');
  }

  /**
   * Make a test product
   */
  public function testTestCreateDummyProduct() {
    //cache_clear_all();
    $this->drupalLogin($this->site_admin);
    // Silly hack to workaround a current bug in views that prevents users from
    //  seeing the admin/commerce/products page.
    $this->drupalPost('admin/modules', array(), 'Save configuration');

    $product = $this->createDummyProduct();
    debug($product);
    $store_admin = $this->createStoreAdmin();
    $this->drupalLogin($store_admin);
    //$super_admin = $this->createUserWithPermissionHeper(array('site admin', 'store admin'));
    //$this->drupalLogin($super_admin);
    $this->drupalGet('admin/commerce/products');
    $this->assertText($product->title, 'Dummy product found on admin page at admin/commerce/products');
    $this->drupalGet('admin/commerce/products/list');
    $this->assertText($product->title, 'Dummy product found on admin page at admin/commerce/products/list');
    $this->drupalGet('admin/commerce/products/add/product');
  }

  /**
   * Test the creation of a product_display content type and add a product
   * reference field to the content typ.
   */
  public function testTestCreateDummyProductDisplayAndRefField() {
    $this->createDummyProductDisplayContentType();

    $this->drupalLogin($this->site_admin);
    $this->drupalGet('node/add/product-display');
    $this->assertText('product_display', 'product_display content type successfully created and accessible.');
    //$this->assertOptionSelected('edit-field-product-und', '_none', 'Dummy Product Display reference field shows up on node add page');
    $this->assertFieldById('edit-field-product-und', '', 'Product reference field found on Dummy Product Display.');

    // Try to add the same field a second time and see if any errors pop up.
    //  If uncommented, this will product an error. Basically, this should be
    //  turned into an assertion that checks for the presence of the field.
    //$this->attachProductReferenceField('product_display', 'field_product');
  }

  /**
   * Test the createDummyProductNode function.
   */
  public function testTestCreateDummyProductNode() {
    // Create a dummy product display content type
    $this->createDummyProductDisplayContentType();

    // Create dummy product display nodes (and their corresponding product
    //  entities)
    $sku = 'PROD-01';
    $product_name = 'Product One';
    $product = $this->createDummyProduct($sku, $product_name);
    $product_node = $this->createDummyProductNode($product->product_id, $product_name);

    $this->drupalLogin($this->site_admin);
    $this->drupalGet('node/1');
    $this->assertText($product_name, "Product <code>$product_name</code> created successfully");
  }

  /**
   * Test the createDummyProductNodeBatch function.
   */
  public function testTestCreateDummyProductNodeBatch() {
    $product_nodes = $this->createDummyProductNodeBatch(3);
    $this->drupalLogin($this->site_admin);
    $product_node = $product_nodes[1];
    $this->drupalGet("node/{$product_node->nid}");
    $this->assertText($product_node->title, "Product <em>{$product_node->title}</em> node page exists!");
  }


  /**
   * Test the currency value rounding.
   */
  public function testCurrencyRounding() {

    // array( rounding_step => array( 'value' => 'expected result'));
    $rounding_numbers = array(
      '0.05' => array(
        '1' => '1',
        '5' => '5',
        '777' => '777',
        '1.22' => '1.20',
        '12.2249' => '12.20',
        '1200.225' => '1200.25',
        '0.2749' => '0.25',
        '490.275' => '490.30',
      ),
      '0.02' => array(
        '1' => '1',
        '777' => '777',
        '1.205' => '1.20',
        '12.20999' => '12.20',
        '1200.21' => '1200.22',
        '0.26999' => '0.26',
        '490.2712' => '490.28',
      ),
      '0.5' => array(
        '1' => '1',
        '5' => '5',
        '1.22' => '1',
        '12.2499' => '12',
        '1200.25' => '1200.5',
        '0.749' => '0.5',
        '490.75' => '491.0',
      ),
      '0.2' => array(
        '1' => '1',
        '777' => '777',
        '1.05' => '1',
        '12.0999' => '12',
        '1200.1' => '1200.2',
        '0.6999' => '0.6',
        '490.712' => '490.8',
      ),
    );

    foreach ($rounding_numbers as $rounding_step => $numbers) {
      foreach ($numbers as $input => $output) {
        $currency = (object) array('decimals' => 2, 'rounding_step' => $rounding_step);

        $result = commerce_currency_round($input, $currency);
        $this->assertEqual($result, $output, 'Rounding ' . $input . ' to ' . $output . ' with the rounding step: ' . $rounding_step . '.');
      }
    }
  }
}
