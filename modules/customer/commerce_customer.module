<?php
// $Id$

/**
 * @file
 * Defines the customer profile entity and API functions to manage customers and
 * interact with them.
 */

/**
 * Implements hook_entity_info().
 */
function commerce_customer_entity_info() {
  $return = array(
    'commerce_customer_profile' => array(
      'label' => t('Customer profile'),
      'controller class' => 'CommerceCustomerProfileEntityController',
      'base table' => 'commerce_customer_profile',
      'revision table' => 'commerce_customer_profile_revision',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'profile_id',
        'revision' => 'revision_id',
        'bundle' => 'type',
        'label' => 'profile_id', // TODO: Update to use a custom callback.
      ),
      'bundle keys' => array(
        'bundle' => 'type',
      ),
      'bundles' => array(),
      'load hook' => 'commerce_customer_profile_load',
      'view modes' => array(
        'administrator' => array(
          'label' => t('Administrator'),
          'custom settings' => FALSE,
        ),
        'customer' => array(
          'label' => t('Customer'),
          'custom settings' => FALSE,
        ),
      ),

      'creation callback' => '_commerce_customer_profile_create',
      'save callback' => 'commerce_customer_profile_save',
      'deletion callback' => 'commerce_customer_profile_delete',
      'access callback' => 'commerce_customer_profile_access',
      'token type' => 'customer',
    ),
  );

  foreach (commerce_customer_profile_type_get_name() as $type => $name) {
    $return['commerce_customer_profile']['bundles'][$type] = array(
      'label' => $name,
    );
  }

  return $return;
}

/**
 * Implements hook_enable().
 */
function commerce_customer_enable() {
  // Add the address field to customer profile bundles.
  $entity_info = entity_get_info('commerce_customer_profile');

  foreach ($entity_info['bundles'] as $type => $data) {
    commerce_customer_configure_customer_profile_type($type);
  }
}

/**
 * Implements hook_views_api().
 */
function commerce_customer_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'commerce_customer') . '/includes/views',
  );
}

/**
 * Implements hook_permission().
 */
function commerce_customer_permission() {
  $permissions = array(
    'administer customer profiles' => array(
      'title' => t('Administer customer profiles'),
      'description' => t('Allows users to perform any action on customer profiles of any type.'),
      'restrict access' => TRUE,
    ),
    'administer customer profile types' => array(
      'title' => t('Administer customer profile types'),
      'description' => t('Allows users to add customer profile types and configure their fields.'),
      'restrict access' => TRUE,
    ),
    'access customer profiles' => array(
      'title' => t('Access customer profiles'),
      'description' => t('Allows users to view lists of customer profiles in the Store admin and reference lists.'),
    ),
  );

  // Add profile type specific permissions. Note that users with administer
  // customer profiles permission should have access to do anything the
  //  permissions below grant a user to do.
  foreach (commerce_customer_profile_type_get_name() as $type => $name) {
    $permissions['create ' . $type . ' customer profiles'] = array(
      'title' => t('Create %type customer profiles', array('%type' => $name)),
    );
    $permissions['edit any ' . $type . ' customer profile'] = array(
      'title' => t('Edit or delete any %type customer profile', array('%type' => $name)),
    );
    $permissions['edit own ' . $type . ' customer profiles'] = array(
      'title' => t('Edit or delete own %type customer profiles', array('%type' => $name)),
    );
  }

  return $permissions;
}

/**
 * Implements hook_theme().
 */
function commerce_customer_theme() {
  return array(
    'commerce_customer_profile' => array(
      'variables' => array('profile' => NULL, 'view_mode' => NULL),
    ),
  );
}

/**
 * Implements hook_commerce_customer_profile_info().
 */
function commerce_customer_commerce_customer_profile_info() {
  $profile_types = array();

  $profile_types['billing'] = (object) array(
    'type' => 'billing',
    'name' => t('Billing information'),
    'description' => t('The profile used to collect billing information on the checkout and order forms.'),
    'help' => '',
  );

  return $profile_types;
}

/**
 * Implements hook_commerce_checkout_pane_info().
 */
function commerce_customer_commerce_checkout_pane_info() {
  $checkout_panes = array();
  $weight = 5;

  foreach (commerce_customer_profile_types() as $type => $profile_type) {
    $checkout_panes['customer_profile_' . $type] = (object) array(
      'title' => $profile_type->name,
      'file' => 'includes/commerce_customer.checkout_pane.inc',
      'base' => 'commerce_customer_profile_pane',
      'page' => 'checkout',
      'weight' => $weight++,
    );
  }

  return $checkout_panes;
}

/**
 * Returns an array of customer profile type objects keyed by type.
 */
function commerce_customer_profile_types() {
  // First check the static cache for a profile types array.
  $profile_types = &drupal_static(__FUNCTION__);

  // If it did not exist, fetch the types now.
  if (!isset($profile_types)) {
    // Find profile types defined by hook_commerce_customer_profile_info().
    foreach (module_implements('commerce_customer_profile_info') as $module) {
      foreach (module_invoke($module, 'commerce_customer_profile_info') as $type => $profile_type) {
        // Set the module each profile type is defined by.
        $profile_type->module = $module;
        $profile_types[$type] = $profile_type;
      }
    }

    // Last allow the info to be altered by other modules.
    drupal_alter('commerce_customer_profile_info', $profile_types);
  }

  return $profile_types;
}

/**
 * Loads a customer profile type.
 *
 * @param $type
 *   The machine-readable name of the customer profile type; accepts normal
 *     machine names and URL prepared machine names with underscores replaced by
 *     hyphens.
 */
function commerce_customer_profile_type_load($type) {
  $type = strtr($type, array('-' => '_'));
  $profile_types = commerce_customer_profile_types();
  return !empty($profile_types[$type]) ? $profile_types[$type] : FALSE;
}

/**
 * Returns the human readable name of any or all customer profile types.
 *
 * @param $type
 *   Optional parameter specifying the type whose name to return.
 *
 * @return
 *   Either an array of all profile type names keyed by the machine name or a
 *     string containing the human readable name for the specified type. If a
 *     type is specified that does not exist, this function returns FALSE.
 */
function commerce_customer_profile_type_get_name($type = NULL) {
  $profile_types = commerce_customer_profile_types();

  // Return a type name if specified and it exists.
  if (!empty($type)) {
    if (isset($profile_types[$type])) {
      return $profile_types[$type]->name;
    }
    else {
      // Return FALSE if it does not exist.
      return FALSE;
    }
  }

  // Otherwise turn the array values into the type name only.
  foreach ($profile_types as $key => $value) {
    $profile_types[$key] = $value->name;
  }

  return $profile_types;
}

/**
 * Wraps commerce_customer_profile_type_get_name() for the Entity module.
 */
function commerce_customer_profile_type_options_list() {
  return commerce_customer_profile_type_get_name();
}

/**
 * Title callback: return the human-readable customer profile type name.
 */
function commerce_customer_profile_type_title($profile_type) {
  return $profile_type->name;
}

/**
 * Returns a path argument from a customer profile type.
 */
function commerce_customer_profile_type_to_arg($type) {
  return $type;
}

/**
 * Returns an initialized customer profile object.
 *
 * @param $type
 *   The type of customer profile to create.
 * @param $uid
 *   The uid of the user the customer profile is for.
 *
 * @return
 *   A customer profile object with all default fields initialized.
 */
function commerce_customer_profile_new($type = '', $uid = 0) {
  return entity_get_controller('commerce_customer_profile')->create($type, $uid);
}

/**
 * Creation callback for the Entity module.
 */
function _commerce_customer_profile_create($values = array()) {
  // Create a new customer profile for the specified user.
  $profile = commerce_customer_profile_new($values['type'], $values['uid']);
  unset($values['type'], $values['uid']);

  $wrapper = entity_metadata_wrapper('commerce_customer_profile', $profile);

  foreach ($values as $name => $value) {
    $wrapper->$name->set($value);
  }

  return $wrapper;
}

/**
 * Saves a customer profile.
 *
 * @param $profile
 *   The full customer profile object to save. If $profile->profile_id is empty,
 *     a new customer profile will be created.
 *
 * @return
 *   The saved customer profile object.
 */
function commerce_customer_profile_save($profile) {
  return entity_get_controller('commerce_customer_profile')->save($profile);
}

/**
 * Loads a customer profile by ID.
 */
function commerce_customer_profile_load($profile_id) {
  $profiles = commerce_customer_profile_load_multiple(array($profile_id), array());
  return $profiles ? reset($profiles) : FALSE;
}

/**
 * Loads multiple customer profiles by ID or based on a set of conditions.
 *
 * @see entity_load()
 *
 * @param $profile_ids
 *   An array of customer profile IDs.
 * @param $conditions
 *   An array of conditions on the {commerce_customer_profile} table in the form
 *     'field' => $value.
 * @param $reset
 *   Whether to reset the internal customer profile loading cache.
 *
 * @return
 *   An array of customer profile objects indexed by profile_id.
 */
function commerce_customer_profile_load_multiple($profile_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('commerce_customer_profile', $profile_ids, $conditions, $reset);
}

/**
 * Generate an array for rendering the given customer profile.
 *
 * @param $profile
 *   A fully loaded customer profile object.
 * @param $view_mode
 *   The view mode for displaying the profile, 'administrator' or 'customer'.
 *
 * @return
 *   An array as expected by drupal_render().
 */
function commerce_customer_profile_build_content($profile, $view_mode = 'administrator') {
  // Populate $profile->content with a render() array.
  // Remove previously built content, if it exists.
  $profile->content = array();

  // Build fields content.
  field_attach_prepare_view('commerce_customer_profile', array($profile->profile_id => $profile), $view_mode);
  entity_prepare_view('commerce_customer_profile', array($profile->profile_id => $profile));
  $profile->content += field_attach_view('commerce_customer_profile', $profile, $view_mode);

  // Allow modules to make their own additions to the customer profile content.
  module_invoke_all('commerce_customer_profile_view', $profile, $view_mode);

  // Remove the content array from the profile to avoid duplicate rendering.
  $build = $profile->content;
  unset($profile->content);

  $build += array(
    '#theme' => 'commerce_customer_profile',
    '#profile' => $profile,
    '#view_mode' => $view_mode,
  );

  // Allow modules to modify the final build array.
  drupal_alter('commerce_customer_profile_view', $build);

  return $build;
}

/**
 * Deletes a customer profile by ID.
 *
 * @param $profile_id
 *   The ID of the customer profile to delete.
 *
 * @return
 *   TRUE on success, FALSE otherwise.
 */
function commerce_customer_profile_delete($profile_id) {
  return commerce_customer_profile_delete_multiple(array($profile_id));
}

/**
 * Deletes multiple customer profiles by ID.
 *
 * @param $profile_ids
 *   An array of customer profile IDs to delete.
 *
 * @return
 *   TRUE on success, FALSE otherwise.
 */
function commerce_customer_profile_delete_multiple($profile_ids) {
  return entity_get_controller('commerce_customer_profile')->delete($profile_ids);
}

/**
 * Checks customer profile access for various operations.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create' or
 *   'delete'.
 * @param $profile
 *   Optionally a profile to check access for or for the create operation the
 *   profile type. If nothing is given access permissions for all profiles are returned.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the current user.
 */
function commerce_customer_profile_access($op, $profile = NULL, $account = NULL) {
  global $user;
  $account = isset($account) ? $account : $user;

  if (user_access('administer customer profiles', $account)) {
    return TRUE;
  }

  if ($op == 'view' && user_access('access customer profiles', $account)) {
    return TRUE;
  }

  if (isset($profile) && is_string($profile) && $op == 'create' && user_access('create ' . $profile . ' customer profiles', $account)) {
    return TRUE;
  }

  if (isset($profile) && ($op == 'update' || $op == 'delete')) {
    if (user_access('edit any ' . $profile->type . ' customer profile', $account)) {
      return TRUE;
    }

    // Others either don't have any access or must match the profile uid.
    if ($account->uid && user_access('edit own ' . $profile->type . ' customer profiles', $account) && $profile->uid == $account->uid) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Ensures the address field is present on the specified customer profile bundle.
 */
function commerce_customer_configure_customer_profile_type($type) {
  // If a field type we know should exist isn't found, clear the Field cache.
  if (!field_info_field_types('addressfield')) {
    field_cache_clear();
  }

  $field = field_info_field($type . '_address');
  $instance = field_info_instance('commerce_customer_profile', $type . '_address', $type);

  if (empty($field)) {
    $field = array(
      'field_name' => $type . '_address',
      'type' => 'addressfield',
      'cardinality' => 1,
      'entity_types' => array('commerce_customer_profile'),
      'translatable' => FALSE,
    );
    $field = field_create_field($field);
  }

  if (empty($instance)) {
    $instance = array(
      'field_name' => $type . '_address',
      'entity_type' => 'commerce_customer_profile',
      'bundle' => $type,
      'label' => t('Address'),
      'required' => TRUE,
      'widget' => array(
        'type' => 'addressfield_standard',
        'weight' => -10,
      ),
      'settings' => array(),

      // Define default formatters for the teaser and full view.
      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'type' => 'addressfield_default',
        ),
        'customer' => array(
          'label' => 'hidden',
          'type' => 'addressfield_default',
        ),
        'administrator' => array(
          'label' => 'hidden',
          'type' => 'addressfield_default',
        ),
      ),
    );
    field_create_instance($instance);
  }
}

/**
 * Implements hook_field_info().
 */
function commerce_customer_field_info() {
  return array(
    'commerce_customer_profile_reference' => array(
      'label' => t('Customer profile reference'),
      'description' => t('This field stores the ID of a related customer profile as an integer value.'),
      'settings' => array('profile_type' => 'billing'),
      'instance_settings' => array(),
      'default_widget' => 'options_select',
      'default_formatter' => 'commerce_customer_profile_reference_view',
      'property_type' => 'commerce_customer_profile',
      'property_callbacks' => array('commerce_customer_profile_property_info_callback'),
    ),
  );
}

/**
 * Implements hook_field_settings_form().
 */
function commerce_customer_field_settings_form($field, $instance, $has_data) {
  $settings = $field['settings'];
  $form = array();

  if ($field['type'] == 'commerce_customer_profile_reference') {
    $options = array();

    // Build an options array of the customer profile types.
    foreach (commerce_customer_profile_type_get_name() as $type => $name) {
      $options[$type] = check_plain($name);
    }

    $form['profile_type'] = array(
      '#type' => 'radios',
      '#title' => t('Customer profile type that can be referenced'),
      '#options' => $options,
      '#default_value' => !empty($settings['profile_type']) ? $settings['profile_type'] : 'billing',
      '#disabled' => $has_data,
    );
  }

  return $form;
}

/**
 * Implements hook_field_validate().
 *
 * Possible error codes:
 * - 'invalid_profile_id': profile_id is not valid for the field (not a
 *                           valid line item ID).
 */
function commerce_customer_field_validate($entity_type, $object, $field, $instance, $langcode, $items, &$errors) {
  if ($field['type'] == 'commerce_customer_profile_reference') {
    // Extract profile_ids to check.
    $profile_ids = array();

    // First check non-numeric profile_id's to avoid losing time with them.
    foreach ($items as $delta => $item) {
      if (is_array($item) && !empty($item['profile_id'])) {
        if (is_numeric($item['profile_id'])) {
          $profile_ids[] = $item['profile_id'];
        }
        else {
          $errors[$field['field_name']][$langcode][$delta][] = array(
            'error' => 'invalid_profile_id',
            'message' => t('%name: you have specified an invalid customer profile for this reference field.', array('%name' => $instance['label'])),
          );
        }
      }
    }

    // Prevent performance hog if there are no ids to check.
    if ($profile_ids) {
      $profiles = commerce_customer_profile_load_multiple($profile_ids, array('type' => $field['settings']['profile_type']));

      foreach ($items as $delta => $item) {
        if (is_array($item)) {
          // Check that the item specifies a profile_id and that a profile of
          // the proper type exists with that ID.
          if (!empty($item['profile_id']) && !isset($profiles[$item['profile_id']])) {
            $errors[$field['field_name']][$langcode][$delta][] = array(
              'error' => 'invalid_profile_id',
              'message' => t('%name: you have specified an invalid customer profile for this reference field.', array('%name' => $instance['label'])),
            );
          }
        }
      }
    }
  }
}

/**
 * Implements hook_field_is_empty().
 */
function commerce_customer_field_is_empty($item, $field) {
  if ($field['type'] == 'commerce_customer_profile_reference') {
    // profile_id = 0 îs empty too, which is exactly what we want.
    return empty($item['profile_id']);
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function commerce_customer_field_formatter_info() {
  return array(
    'commerce_customer_profile_reference_display' => array(
      'label' => t('Customer profile display'),
      'description' => t('Display the customer profile.'),
      'field types' => array('commerce_customer_profile_reference'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function commerce_customer_field_formatter_view($entity_type, $object, $field, $instance, $langcode, $items, $display) {
  $result = array();

  // Collect the list of customer profile IDs.
  $profile_ids = array();

  foreach ($items as $delta => $item) {
    $profile_ids[] = $item['profile_id'];
  }

  switch ($display['type']) {
    case 'commerce_customer_profile_reference_display':
      foreach ($items as $delta => $item) {
        $profile = commerce_customer_profile_load($item['profile_id']);

        if ($profile) {
          $result[$delta] = array(
            '#markup' => drupal_render(commerce_customer_profile_build_content($profile, 'customer')),
          );
        }
      }

      break;
  }

  return $result;
}

/**
 * Implements hook_field_widget_info().
 *
 * Defines widgets available for use with field types as specified in each
 * widget's $info['field types'] array.
 */
function commerce_customer_field_widget_info() {
  $widgets = array();

  // Define the creation / reference widget for line items.
  $widgets['commerce_customer_profile_manager'] = array(
    'label' => t('Customer profile manager'),
    'description' => t('Use a complex widget to edit the profile referenced by this object.'),
    'field types' => array('commerce_customer_profile_reference'),
    'settings' => array(),
    'behaviors' => array(
      'multiple values' => FIELD_BEHAVIOR_CUSTOM,
      'default value' => FIELD_BEHAVIOR_NONE,
    ),
  );

  return $widgets;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function commerce_customer_form_field_ui_field_edit_form_alter(&$form, &$form_state) {
  // Alter the field edit form so it's obvious that customer profile manager
  // widgets do not support multiple values.
  if (!empty($form['locked']) &&
      !empty($form['instance']) &&
      $form['instance']['widget']['type']['#value'] == 'commerce_customer_profile_manager') {
    $form['field']['cardinality']['#options'] = array('1' => '1');
    $form['field']['cardinality']['#description'] = t('The customer profile manager widget only supports single value editing and entry via its form.');
  }
}

/**
 * Implements hook_field_widget_info_alter().
 */
function commerce_customer_field_widget_info_alter(&$info) {
  $info['options_select']['field types'][] = 'commerce_customer_profile_reference';
}

/**
 * Implements hook_options_list().
 */
function commerce_customer_options_list($field) {
  $options = array();

  // Loop through all customer matches.
  foreach (commerce_customer_match_customer_profiles($field) as $profile_id => $data) {
    // Add them to the options list in optgroups by customer profile type.
    $name = check_plain(commerce_customer_profile_type_get_name($data['type']));
    $options[$name][$profile_id] = t('@profile: User @user', array('@profile' => $profile_id, '@user' => $data['uid']));
  }

  // Simplify the options list if only one optgroup exists.
  if (count($options) == 1) {
    $options = reset($options);
  }

  return $options;
}

/**
 * Implements hook_field_widget_form().
 *
 * Used to define the form element for custom widgets.
 */
function commerce_customer_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  // Define the complex customer profile reference field widget.
  if ($instance['widget']['type'] == 'commerce_customer_profile_manager') {
    $profile_type = commerce_customer_profile_type_load($field['settings']['profile_type']);

    // Build an array of customer profile IDs from this field's values.
    $profile_ids = array();

    foreach ($items as $item) {
      $profile_ids[] = $item['profile_id'];
    }

    // Load the profiles for temporary storage in the form array.
    $profiles = commerce_customer_profile_load_multiple($profile_ids);

    if (empty($profiles)) {
      $profiles[0] = commerce_customer_profile_new('billing');
    }

    // Update the base form element array to use the proper theme and validate
    // functions and to include header information for the line item table.
    $element += array(
      '#element_validate' => array('commerce_customer_profile_manager_validate'),
      'profiles' => array('#tree' => TRUE),
    );

    // Add a set of elements to the form for each referenced profile.
    $key = 0;

    foreach ($profiles as $profile) {
      // Add a fieldset around the profile form.
      $element['profiles'][$key] = array(
        '#type' => 'fieldset',
        '#title' => check_plain($profile_type->name),
      );

      // Store the original customer profile for later comparison.
      $element['profiles'][$key]['profile'] = array(
        '#type' => 'value',
        '#value' => $profile,
      );

      field_attach_form('commerce_customer_profile', $profile, $element['profiles'][$key], $form_state);

      // Remove the default #parents array so the normal tree can do its thing.
      unset($element['profiles'][$key]['#parents']);

      // This checkbox will be overridden with a clickable delete image.
      // TODO: Make this an #ajaxy submit button.
      if ($profile->profile_id) {
        $element['profiles'][$key]['remove'] = array(
          '#type' => 'checkbox',
          '#title' => t('Delete this profile'),
          '#default_value' => FALSE,
        );
      }

      $key += 1;
    }

    // If the reference field is not required, unrequire any elements in the
    // profile edit form.
    if (!$delta == 0 || !$instance['required']) {
      commerce_unrequire_form_elements($element);
    }

    return $element;
  }
}

/**
 * Validation callback for a commerce_customer_profile_manager element.
 *
 * When the form is submitted, the profile reference field stores the profile
 * IDs as derived from the $element['profiles'] array and updates any
 * referenced profiles based on the extra form elements.
 */
function commerce_customer_profile_manager_validate($element, &$form_state, $form) {
  $value = array();

  // Loop through the profiles in the manager table.
  foreach (element_children($element['profiles']) as $key) {
    // Update the profile based on the values in the additional elements.
    $profile = clone($element['profiles'][$key]['profile']['#value']);

    // If the line item has been marked for deletion...
    if ($profile->profile_id && $element['profiles'][$key]['remove']['#value']) {
      // Delete the profile now and don't include it from the $value array.
      commerce_customer_profile_delete($profile->profile_id);
    }
    else {
      // Notify field widgets to validate their data.
      field_attach_form_validate('commerce_customer_profile', $profile, $element['profiles'][$key], $form_state);

      // TODO: Trap it on error, rebuild the form with error messages.
      // Notify field widgets to save the field data.
      field_attach_submit('commerce_customer_profile', $profile, $element['profiles'][$key], $form_state);

      // Only save if values were actually changed.
      if ($profile != $element['profiles'][$key]['profile']['#value']) {
        commerce_customer_profile_save($profile);
      }

      // Add the profile ID to the current value of the reference field.
      $value[] = array('profile_id' => $profile->profile_id);
    }
  }

  form_set_value($element, $value, $form_state);
}

/**
 * Implements hook_field_widget_error().
 */
function commerce_customer_field_widget_error($element, $error) {
  form_error($element, $error['message']);
}

/**
 * Callback to alter the property info of the reference field.
 *
 * @see commerce_customer_field_info().
 */
function commerce_customer_profile_property_info_callback(&$info, $entity_type, $field, $instance, $field_type) {
  $property = &$info[$entity_type]['bundles'][$instance['bundle']]['properties'][$field['field_name']];
  $property['options list'] = 'entity_metadata_field_options_list';
  unset($property['query callback']);
}

/**
 * Fetches an array of all customer profiles matching the given parameters.
 *
 * This info is used in various places (allowed values, autocomplete results,
 * input validation...). Some of them only need the profile_ids, others
 * profile_id + titles, others yet profile_id + titles + rendered row (for
 * display in widgets).
 *
 * The array we return contains all the potentially needed information,
 * and lets calling functions use the parts they actually need.
 *
 * @param $field
 *   The field description.
 * @param $ids
 *   Optional product ids to lookup.
 * @param $limit
 *   If non-zero, limit the size of the result set.
 *
 * @return
 *   An array of valid profiles in the form:
 *   array(
 *     profile_id => array(
 *       'uid' => The user ID,
 *       'rendered' => The text to display in widgets (can be HTML)
 *     ),
 *     ...
 *   )
 */
function commerce_customer_match_customer_profiles($field, $ids = array(), $limit = NULL) {
  $results = &drupal_static(__FUNCTION__, array());

  // Create unique id for static cache.
  $cid = implode(':', array(
    $field['field_name'],
    implode('-', $ids),
    $limit,
  ));

  if (!isset($results[$cid])) {
    $matches = _commerce_customer_match_customer_profiles_standard($field, $ids, $limit);

    // Store the results.
    $results[$cid] = !empty($matches) ? $matches : array();
  }

  return $results[$cid];
}

/**
 * Helper function for commerce_customer_match_customer_profiles().
 *
 * Returns an array of products matching the specific parameters.
 */
function _commerce_customer_match_customer_profiles_standard($field, $ids = array(), $limit = NULL) {
  // Build the query object with the necessary fields.
  $query = db_select('commerce_customer_profile', 'cp');
  $profile_id_alias = $query->addField('cp', 'profile_id');
  $profile_uid_alias = $query->addField('cp', 'uid');
  $profile_type_alias = $query->addField('cp', 'type');

  // Add a condition to the query to filter by matching profile types.
  if (is_array($field['settings']['referenceable_types']) && !empty($field['settings']['referenceable_types'])) {
    $types = array_diff(array_values($field['settings']['referenceable_types']), array(0, NULL));

    // Only filter by type if some types have been specified.
    if (!empty($types)) {
      $query->condition('cp.type', $types, 'IN');
    }
  }

  if ($ids) {
    // Otherwise add a profile_id specific condition if specified.
    $query->condition($product_id_alias, $ids, 'IN', $ids);
  }

  // Order the results by ID and then profile type.
  $query
    ->orderBy($profile_id_alias)
    ->orderBy($profile_type_alias);

  // Add a limit if specified.
  if ($limit) {
    $query->range(0, $limit);
  }

  // Execute the query and build the results array.
  $result = $query->execute();

  $matches = array();

  foreach ($result->fetchAll() as $profile) {
    $matches[$profile->profile_id] = array(
      'uid' => $profile->uid,
      'type' => $profile->type,
      'rendered' => t('Profile @profile_id', array('@profile_id' => $profile->profile_id)),
    );
  }

  return $matches;
}

/**
 * Callback for getting customer profile properties.
 *
 * @see commerce_customer_entity_property_info()
 */
function commerce_customer_profile_get_properties($profile, array $options, $name) {
  switch ($name) {
    case 'user':
      return $profile->uid;
  }
}

/**
 * Callback for setting customer profile properties.
 *
 * @see commerce_customer_entity_property_info()
 */
function commerce_customer_profile_set_properties($profile, $name, $value) {
  if ($name == 'user') {
    $profile->uid = $value;
  }
}
